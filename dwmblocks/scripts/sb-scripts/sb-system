#!/bin/sh

# Path to the temporary file
temp_file="/tmp/cpu_usage_temp"

# Function to read CPU statistics
read_cpu_stat() {
    head -n1 /proc/stat
}

# Function to calculate CPU usage
calculate_cpu_usage() {
    # Get the current CPU statistics
    cpu_now=$(read_cpu_stat)
  
    # If the temp file doesn't exist, initialize it
    if [ ! -f "$temp_file" ]; then
        echo "$cpu_now" > "$temp_file"
        exit 0
    fi

    # Read the previous CPU statistics from the temp file
    cpu_last=$(cat "$temp_file")

    # Get all columns but skip the first (which is the "cpu" string)
    cpu_sum_now=0
    cpu_sum_last=0

    set -- $cpu_now
    shift 1 # Skip the first item 'cpu'
    for value in "$@"; do
       cpu_sum_now=$((cpu_sum_now + value))
    done
    cpu_idle_now=$4 # 4th column is idle time

    set -- $cpu_last
    shift 1 # Skip the first item 'cpu'
    for value in "$@"; do
       cpu_sum_last=$((cpu_sum_last + value))
    done
    cpu_idle_last=$4 # 4th column is idle time

    # Calculate deltas
    cpu_delta=$((cpu_sum_now - cpu_sum_last))
    cpu_idle=$((cpu_idle_now - cpu_idle_last))
    cpu_used=$((cpu_delta - cpu_idle))

    # Calculate the CPU usage percentage
    if [ $cpu_delta -ne 0 ]; then
        cpu_usage=$((100 * cpu_used / cpu_delta))
    else
        cpu_usage=0
    fi

    # Save the current CPU statistics
    echo "$cpu_now" > "$temp_file"

    # Output the CPU usage percentage
    echo "${cpu_usage}%"
}

# Function to get RAM usage
calculate_ram_usage() {
    free | awk 'NR==2{printf "%d%%\n", ($3*100/$2 + 0.5)}'
}

# Handle click events to refresh the values
case "$BLOCK_BUTTON" in
    1) ;;
esac

# Get the current values
cpu_usage=$(calculate_cpu_usage)
ram_usage=$(calculate_ram_usage)

# Display the values
echo "^b#ebcb8b^^c#2e3440^   ^b#2e3440^^c#ebcb8b^  ${cpu_usage}  ${ram_usage}^b#2e3440^"